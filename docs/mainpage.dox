/// \brief Documentation for Optional Library
/// \author Anthony Leedom
/// \file mainpage.dox

/// \mainpage Optional Library
///
/// A header only implementation of the Boost::Optional Library.
///
/// The Optional template class provides an interface for any type to allow its
/// objects to optionally contain a value. This is useful for a variety of
/// reasons:
///    - Templated type does not need a default constructor.
///    - It expresses its intent and makes code more readable than pointers or
///    other work arounds such as std::pair<T, bool>.
///    - Expensive to construct objects are not created if not needed.
///    - Allocates memory on the stack.
///
/// Optional objects can be queried for validity by an explicit conversion to
/// bool. To access the underlying object, the dereference operator* can be
/// used, or operator-> provides access to the underlying objectâ€™s members.
